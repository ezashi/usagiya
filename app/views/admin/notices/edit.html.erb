<% content_for :page_title, "お知らせを編集" %>

<style>
    /* お知らせフォームのスタイル */
    .admin-notice-form {
        padding: 2rem;
        max-width: 1600px;
        margin: 0 auto;
        min-height: 100vh;
    }

    .form-header {
        margin-bottom: 2rem;
    }

    .back-link {
        display: inline-flex;
        align-items: center;
        gap: 0.5rem;
        color: var(--admin-text-secondary);
        text-decoration: none;
        margin-bottom: 1rem;
        transition: color 0.2s ease;
    }

    .back-link:hover {
        color: var(--admin-accent);
    }

    .back-icon {
        transition: transform 0.2s ease;
    }

    .back-link:hover .back-icon {
        transform: translateX(-3px);
    }

    .form-title {
        color: var(--admin-text);
        font-size: 2rem;
        font-weight: 700;
        margin: 0;
    }

    .notice-form {
        display: block;
    }

    .form-layout {
        display: grid;
        grid-template-columns: 1fr 280px;
        gap: 1.5rem;
        align-items: start;
    }

    .form-main {
        display: flex;
        flex-direction: column;
        gap: 2rem;
    }

    .form-sidebar {
        display: flex;
        flex-direction: column;
        gap: 1.5rem;
        position: fixed;
        top: 100px;
        right: calc((100vw - 1600px) / 2 + 2rem);
        width: 260px;
        z-index: 10;
    }

    @media (max-width: 1650px) {
        .form-sidebar {
            position: sticky;
            top: 100px;
            right: auto;
            align-self: flex-start;
        }
    }

    .required-badge {
        display: inline-block;
        padding: 0.125rem 0.5rem;
        background-color: var(--admin-error);
        color: #ff0000;
        font-size: 0.75rem;
        font-weight: 600;
        border-radius: 4px;
        margin-left: 0.5rem;
    }

    /* タイトル入力 */
    .title-input {
        font-size: 1.25rem;
        font-weight: 600;
    }

    /* リッチテキストエディタ */
    .admin-rich-text {
        min-height: 400px;
    }

    trix-toolbar {
        background-color: var(--admin-bg-secondary);
        border: 1px solid var(--admin-border);
        border-bottom: none;
        border-radius: 8px 8px 0 0;
        padding: 0.75rem;
        position: sticky;
        top: 0;
        z-index: 100;
    }

    trix-toolbar .trix-button-group {
        background-color: var(--admin-bg-card);
        border: 1px solid var(--admin-border);
        border-radius: 6px;
        margin-right: 0.5rem;
    }

    trix-toolbar .trix-button {
        border: none;
        background-color: transparent;
        color: var(--admin-text-secondary);
        transition: all 0.2s ease;
        font-size: 0.875rem;
        padding: 0.5rem;
    }

    trix-toolbar .trix-button:hover {
        background-color: var(--admin-bg-hover);
        color: var(--admin-text);
    }

    trix-toolbar .trix-button.trix-active {
        background-color: var(--admin-primary);
        color: white;
    }

    trix-editor {
        background-color: white;
        border: 1px solid var(--admin-border);
        border-radius: 0 0 8px 8px;
        color: #333;
        padding: 2rem 3rem;
        min-height: 500px;
        max-height: none;
        overflow-y: visible;
        overflow-x: hidden;
        word-wrap: break-word !important;
        overflow-wrap: break-word !important;
        white-space: pre-wrap !important;
        line-height: 1.8;
        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Noto Sans JP', sans-serif;
        font-size: 1rem;
    }

    trix-editor:focus {
        outline: none;
        border-color: var(--admin-accent);
        box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
    }

    /* 画像スタイル */
    trix-editor figure[data-trix-attachment] {
        position: relative;
        display: inline-block;
        margin: 1rem 0;
    }

    trix-editor img {
        max-width: 100%;
        height: auto;
        border-radius: 4px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }

    trix-editor img.resizable {
        cursor: nwse-resize;
    }

    /* リサイズハンドル */
    trix-editor figure[data-trix-attachment]:hover .image-resize-handle {
        opacity: 1;
    }

    .image-resize-handle {
        opacity: 0;
        transition: opacity 0.2s ease;
    }

    /* テキストの折り返し */
    trix-editor * {
        max-width: 100%;
        overflow-wrap: break-word;
        word-wrap: break-word;
    }

    /* 公開設定 */
    .status-info {
        display: flex;
        flex-direction: column;
        gap: 0.75rem;
    }

    .status-badge {
        display: inline-flex;
        align-items: center;
        gap: 0.5rem;
        padding: 0.5rem 1rem;
        border-radius: 8px;
        font-weight: 600;
        font-size: 0.95rem;
    }

    .status-published {
        background-color: rgba(16, 185, 129, 0.2);
        color: var(--admin-success);
    }

    .status-draft {
        background-color: rgba(148, 163, 184, 0.2);
        color: var(--admin-text-muted);
    }

    .status-editing {
        background-color: rgba(245, 158, 11, 0.2);
        color: var(--admin-warning);
    }

    .status-text {
        color: var(--admin-text-secondary);
        font-size: 0.875rem;
        margin: 0;
    }

    .meta-info {
        display: flex;
        flex-direction: column;
        gap: 0.75rem;
    }

    .meta-item {
        display: flex;
        flex-direction: column;
        gap: 0.25rem;
    }

    .meta-label {
        color: var(--admin-text-secondary);
        font-size: 0.875rem;
        font-weight: 500;
    }

    .meta-value {
        color: var(--admin-text);
        font-size: 0.95rem;
    }

    /* アクションボタン */
    .action-buttons {
        display: flex;
        flex-direction: column;
        gap: 0.75rem;
    }

    .action-buttons .admin-btn {
        justify-content: center;
        width: 100%;
    }

    .danger-zone {
        border-color: rgba(239, 68, 68, 0.3);
    }

    .danger-header {
        background: linear-gradient(135deg, rgba(239, 68, 68, 0.1) 0%, rgba(220, 38, 38, 0.1) 100%);
        border-bottom-color: rgba(239, 68, 68, 0.3);
    }

    .danger-btn {
        width: 100%;
        justify-content: center;
    }

    /* プレビューモーダル */
    .modal-preview-container {
        background-color: white;
        color: #333;
        border-radius: 8px;
        padding: 2rem;
        max-height: 70vh;
        overflow-y: auto;
    }

    .preview-header {
        border-bottom: 2px solid #f0f0f0;
        padding-bottom: 1rem;
        margin-bottom: 1.5rem;
    }

    .preview-title {
        color: #333;
        font-size: 1.75rem;
        font-weight: 700;
        margin: 0 0 0.5rem 0;
    }

    .preview-date {
        color: #666;
        font-size: 0.95rem;
        margin: 0;
    }

    .preview-content {
        color: #333;
        line-height: 1.8;
    }

    @media (max-width: 1024px) {
        .form-layout {
            grid-template-columns: 1fr;
        }

        .form-sidebar {
            order: -1;
        }
    }

    @media (max-width: 768px) {
        .admin-notice-form {
            padding: 1rem;
        }

        .form-title {
            font-size: 1.5rem;
        }
    }
</style>

<div class="admin-notice-form">
    <div class="form-header">
        <%= link_to admin_notices_path, class: "back-link" do %>
        <svg class="back-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24" width="20" height="20">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19l-7-7m0 0l7-7m-7 7h18"></path>
        </svg>
        お知らせ一覧に戻る
        <% end %>
        <h1 class="form-title">お知らせを編集</h1>
    </div>

    <%= form_with model: [:admin, @notice], local: true, html: { novalidate: true, class: "notice-form" } do |f| %>
    <% if @notice.errors.any? %>
    <div class="admin-alert admin-alert-error">
        <strong><%= pluralize(@notice.errors.count, "件") %>のエラーがあります:</strong>
        <ul style="margin: 0.5rem 0 0 0; padding-left: 1.5rem;">
            <% @notice.errors.full_messages.each do |message| %>
            <li><%= message %></li>
            <% end %>
        </ul>
    </div>
    <% end %>

    <div class="form-layout">
        <!-- メインコンテンツ -->
        <div class="form-main">
            <!-- タイトル -->
            <div class="admin-card">
                <div class="admin-card-header">
                    <h2 class="admin-card-title">
                        <svg style="width: 1.5rem; height: 1.5rem; display: inline-block; vertical-align: middle;" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 8h10M7 12h4m1 8l-4-4H5a2 2 0 01-2-2V6a2 2 0 012-2h14a2 2 0 012 2v8a2 2 0 01-2 2h-3l-4 4z"></path>
                        </svg>
                        タイトル <span class="required-badge">必須</span>
                    </h2>
                </div>
                <div class="admin-card-body">
                    <%= f.text_field :title, 
                             value: @notice.has_draft? ? @notice.draft_title : @notice.title,
                             class: "admin-form-control title-input", 
                             placeholder: "例: 年末年始の営業についてのお知らせ",
                             required: true %>
                </div>
            </div>

            <!-- 本文 -->
            <div class="admin-card">
                <div class="admin-card-header">
                    <h2 class="admin-card-title">
                        <svg style="width: 1.5rem; height: 1.5rem; display: inline-block; vertical-align: middle;" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h7"></path>
                        </svg>
                        本文 <span class="required-badge">必須</span>
                    </h2>
                </div>
                <div class="admin-card-body">
                    <%= f.rich_text_area :content, 
                                 value: (@notice.has_draft? ? @notice.draft_content : @notice.content).to_s,
                                 class: "admin-rich-text",
                                 placeholder: "お知らせの内容を入力してください..." %>
                </div>
            </div>
        </div>

        <!-- サイドバー -->
        <div class="form-sidebar">
            <!-- 公開設定 -->
            <div class="admin-card">
                <div class="admin-card-header">
                    <h2 class="admin-card-title">公開設定</h2>
                </div>
                <div class="admin-card-body">
                    <div class="status-info">
                        <% if @notice.has_draft? %>
                        <div class="status-badge status-editing">
                            <svg style="width: 1.25rem; height: 1.25rem;" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"></path>
                            </svg>
                            編集中の下書きあり
                        </div>
                        <p class="status-text">
                            <%= @notice.draft_saved_at.strftime('%Y年%m月%d日 %H:%M') %> に保存
                        </p>
                        <% end %>

                        <% if @notice.published? %>
                        <div class="status-badge status-published">
                            <svg style="width: 1.25rem; height: 1.25rem;" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                            </svg>
                            公開中
                        </div>
                        <p class="status-text">
                            <%= @notice.published_at.strftime('%Y年%m月%d日 %H:%M') %> に公開
                        </p>
                        <% else %>
                        <div class="status-badge status-draft">
                            <svg style="width: 1.25rem; height: 1.25rem;" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                            </svg>
                            未公開
                        </div>
                        <p class="status-text">
                            まだ公開されていません
                        </p>
                        <% end %>
                    </div>
                </div>
            </div>

            <div class="admin-card">
                <div class="admin-card-body">
                    <div class="meta-info">
                        <div class="meta-item">
                            <span class="meta-label">作成日時:</span>
                            <span class="meta-value"><%= @notice.created_at.strftime('%Y年%m月%d日 %H:%M') %></span>
                        </div>
                        <div class="meta-item">
                            <span class="meta-label">最終更新:</span>
                            <span class="meta-value"><%= @notice.updated_at.strftime('%Y年%m月%d日 %H:%M') %></span>
                        </div>
                    </div>
                </div>
            </div>

            <!-- アクションボタン -->
            <div class="action-buttons">
                <button type="button" class="admin-btn admin-btn-secondary" id="preview-btn">
                    <svg style="width: 1.25rem; height: 1.25rem;" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path>
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"></path>
                    </svg>
                    プレビュー
                </button>

                <%= f.submit "下書き保存",
                       class: "admin-btn admin-btn-secondary" %>

                <%= f.submit "公開",
                       class: "admin-btn admin-btn-success",
                       data: { turbo_confirm: "お知らせを公開しますか？\n一般ユーザーに表示されるようになります。" } %>
            </div>

            <div class="admin-card danger-zone">
                <div class="admin-card-body">
                    <%= link_to admin_notice_path(@notice),
                            class: "admin-btn admin-btn-danger danger-btn",
                            style: "display: inline-flex; align-items: center; gap: 0.5rem; justify-content: center; width: 100%;",
                            data: { turbo_method: :delete, turbo_confirm: "本当に削除しますか？\nこの操作は取り消せません。" } do %>
                    <svg style="width: 1.25rem; height: 1.25rem;" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
                    </svg>
                    お知らせを削除
                    <% end %>
                </div>
            </div>
        </div>
    </div>
    <% end %>
</div>

<!-- プレビューモーダル -->
<div id="preview-modal" class="admin-modal-overlay" style="display: none;">
    <div class="admin-modal" style="max-width: 800px;">
        <div class="admin-modal-header">
            <h2 class="admin-modal-title">プレビュー</h2>
            <button class="close-modal-btn" id="close-preview-btn">
                <svg fill="none" stroke="currentColor" viewBox="0 0 24 24" width="24" height="24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                </svg>
            </button>
        </div>
        <div class="admin-modal-body">
            <div class="modal-preview-container" id="modal-preview-content">
                <!-- プレビュー内容がJavaScriptで挿入されます -->
            </div>
        </div>
    </div>
</div>


<style>
/* Trixカスタマイズスタイル */
trix-toolbar .trix-button-group {
  margin-right: 8px;
}

trix-toolbar .trix-button {
  font-size: 0.85rem !important;
  padding: 0.4rem 0.6rem !important;
  font-weight: 500 !important;
  white-space: nowrap !important;
}

trix-toolbar .trix-button:hover {
  background-color: rgba(59, 130, 246, 0.1) !important;
}

trix-toolbar .trix-button.trix-active {
  background-color: rgba(59, 130, 246, 0.2) !important;
  color: #3b82f6 !important;
}

/* 画像添付ボタンを非表示 */
[data-trix-action="attachFiles"] {
  display: none !important;
}

/* テキスト装飾 */
trix-editor strong {
  font-weight: bold;
}

trix-editor em {
  font-style: italic;
}

trix-editor u {
  text-decoration: underline;
}

/* フォントサイズとカラーのセレクトボックス */
trix-toolbar select {
  font-size: 0.85rem;
  padding: 0.3rem 0.5rem;
  border: 1px solid #ccc;
  border-radius: 4px;
  background-color: white;
  cursor: pointer;
  margin: 0 4px;
}

trix-toolbar select:hover {
  background-color: rgba(59, 130, 246, 0.1);
}

/* ツールバーのカスタムコントロール */
.trix-custom-controls {
  display: inline-flex;
  align-items: center;
  gap: 8px;
  margin-left: 8px;
}

.trix-custom-controls label {
  font-size: 0.85rem;
  margin: 0;
  display: inline-flex;
  align-items: center;
  gap: 4px;
}

/* 上下の余白を完全に削除 */
trix-editor {
  padding-top: 0.5rem !important;
  padding-bottom: 0.5rem !important;
}

trix-editor > *:first-child {
  margin-top: 0 !important;
  padding-top: 0 !important;
}

trix-editor > *:last-child {
  margin-bottom: 0 !important;
  padding-bottom: 0 !important;
}

trix-editor div:first-child,
trix-editor p:first-child,
trix-editor h1:first-child,
trix-editor h2:first-child,
trix-editor h3:first-child {
  margin-top: 0 !important;
  padding-top: 0 !important;
}

trix-editor div:last-child,
trix-editor p:last-child,
trix-editor h1:last-child,
trix-editor h2:last-child,
trix-editor h3:last-child {
  margin-bottom: 0 !important;
  padding-bottom: 0 !important;
}
</style>

<script>
// プレビューモーダル
document.addEventListener('DOMContentLoaded', function() {
  const previewBtn = document.getElementById('preview-btn');
  if (previewBtn) {
    previewBtn.addEventListener('click', function(e) {
      e.preventDefault();
      const title = document.querySelector('input[name="notice[title]"]')?.value || '';
      const content = document.querySelector('trix-editor')?.innerHTML || '';
      const previewHTML = `
        <div class="preview-header">
          <h3 class="preview-title">${title || '（タイトル未入力）'}</h3>
          <p class="preview-date">${new Date().toLocaleDateString('ja-JP', { year: 'numeric', month: 'long', day: 'numeric' })}</p>
        </div>
        <div class="preview-content">${content || '（本文未入力）'}</div>
      `;
      const previewContent = document.getElementById('modal-preview-content');
      const previewModal = document.getElementById('preview-modal');
      if (previewContent) previewContent.innerHTML = previewHTML;
      if (previewModal) previewModal.style.display = 'flex';
    });
  }

  const closePreviewBtn = document.getElementById('close-preview-btn');
  if (closePreviewBtn) {
    closePreviewBtn.addEventListener('click', function() {
      const previewModal = document.getElementById('preview-modal');
      if (previewModal) previewModal.style.display = 'none';
    });
  }

  const previewModal = document.getElementById('preview-modal');
  if (previewModal) {
    previewModal.addEventListener('click', function(e) {
      if (e.target === this) {
        this.style.display = 'none';
      }
    });
  }
});

document.addEventListener('turbo:load', function() {
  const previewBtn = document.getElementById('preview-btn');
  if (previewBtn) {
    previewBtn.addEventListener('click', function(e) {
      e.preventDefault();
      const title = document.querySelector('input[name="notice[title]"]')?.value || '';
      const content = document.querySelector('trix-editor')?.innerHTML || '';
      const previewHTML = `
        <div class="preview-header">
          <h3 class="preview-title">${title || '（タイトル未入力）'}</h3>
          <p class="preview-date">${new Date().toLocaleDateString('ja-JP', { year: 'numeric', month: 'long', day: 'numeric' })}</p>
        </div>
        <div class="preview-content">${content || '（本文未入力）'}</div>
      `;
      const previewContent = document.getElementById('modal-preview-content');
      const previewModal = document.getElementById('preview-modal');
      if (previewContent) previewContent.innerHTML = previewHTML;
      if (previewModal) previewModal.style.display = 'flex';
    });
  }
});

// Trixエディタのカスタマイズ
console.log('Trix customization script loaded');

document.addEventListener('trix-before-initialize', function() {
  console.log('trix-before-initialize event fired');

  if (typeof Trix === 'undefined') {
    console.error('Trix is not defined');
    return;
  }

  // 画像添付を完全に無効化
  Trix.config.attachments.preview.caption = false;

  // 下線属性を追加
  Trix.config.textAttributes.underline = {
    tagName: "u",
    inheritable: true,
    parser: function(element) {
      return element.tagName === "U";
    }
  };

  // カスタムツールバー
  Trix.config.toolbar.getDefaultHTML = function() {
    return `
      <div class="trix-button-row">
        <span class="trix-button-group trix-button-group--text-tools">
          <button type="button" class="trix-button trix-button--icon trix-button--icon-bold" data-trix-attribute="bold" data-trix-key="b" title="太字" tabindex="-1">太字</button>
          <button type="button" class="trix-button trix-button--icon trix-button--icon-italic" data-trix-attribute="italic" data-trix-key="i" title="斜体" tabindex="-1">斜体</button>
          <button type="button" class="trix-button" data-trix-attribute="underline" title="下線" tabindex="-1">下線</button>
        </span>
        <span class="trix-button-group trix-button-group--block-tools">
          <button type="button" class="trix-button" id="align-left-btn" title="左揃え" tabindex="-1">← 左</button>
          <button type="button" class="trix-button" id="align-center-btn" title="中央揃え" tabindex="-1">↔ 中央</button>
          <button type="button" class="trix-button" id="align-right-btn" title="右揃え" tabindex="-1">右 →</button>
        </span>
        <span class="trix-custom-controls">
          <label>
            サイズ:
            <select id="font-size-select">
              <option value="">選択</option>
              <option value="10">10px</option>
              <option value="12">12px</option>
              <option value="14">14px</option>
              <option value="16">16px</option>
              <option value="18">18px</option>
              <option value="20">20px</option>
              <option value="24">24px</option>
              <option value="28">28px</option>
              <option value="32">32px</option>
              <option value="36">36px</option>
              <option value="48">48px</option>
            </select>
          </label>
          <label>
            色:
            <select id="font-color-select">
              <option value="">選択</option>
              <option value="#000000">黒</option>
              <option value="#FF0000">赤</option>
              <option value="#0000FF">青</option>
              <option value="#008000">緑</option>
              <option value="#FFFF00">黄</option>
              <option value="#FFA500">オレンジ</option>
              <option value="#800080">紫</option>
              <option value="#808080">灰</option>
              <option value="#FFFFFF">白</option>
            </select>
          </label>
        </span>
        <span class="trix-button-group-spacer"></span>
        <span class="trix-button-group trix-button-group--history-tools">
          <button type="button" class="trix-button trix-button--icon trix-button--icon-undo" data-trix-action="undo" data-trix-key="z" title="元に戻す" tabindex="-1">戻す</button>
          <button type="button" class="trix-button trix-button--icon trix-button--icon-redo" data-trix-action="redo" data-trix-key="shift+z" title="やり直し" tabindex="-1">進む</button>
        </span>
      </div>
    `;
  };

  console.log('Trix toolbar customized successfully');
});

// フォントサイズとカラーの変更処理
function setupFontControls() {
  const fontSizeSelect = document.getElementById('font-size-select');
  const fontColorSelect = document.getElementById('font-color-select');
  const alignLeftBtn = document.getElementById('align-left-btn');
  const alignCenterBtn = document.getElementById('align-center-btn');
  const alignRightBtn = document.getElementById('align-right-btn');
  const editor = document.querySelector('trix-editor');

  if (!editor || !editor.editor) {
    console.log('Editor not ready, retrying...');
    setTimeout(setupFontControls, 100);
    return;
  }

  console.log('Setting up font controls');

  // フォントサイズ変更
  if (fontSizeSelect) {
    fontSizeSelect.addEventListener('change', function() {
      const size = this.value;
      if (size && editor.editor) {
        const selectedRange = editor.editor.getSelectedRange();
        if (selectedRange[0] !== selectedRange[1]) {
          const selectedText = editor.editor.getDocument().toString().substring(selectedRange[0], selectedRange[1]);
          const html = `<span style="font-size: ${size}px;">${selectedText}</span>`;
          editor.editor.setSelectedRange(selectedRange);
          editor.editor.deleteInDirection("forward");
          editor.editor.insertHTML(html);
        }
        this.value = '';
      }
    });
  }

  // フォントカラー変更
  if (fontColorSelect) {
    fontColorSelect.addEventListener('change', function() {
      const color = this.value;
      if (color && editor.editor) {
        const selectedRange = editor.editor.getSelectedRange();
        if (selectedRange[0] !== selectedRange[1]) {
          const selectedText = editor.editor.getDocument().toString().substring(selectedRange[0], selectedRange[1]);
          const html = `<span style="color: ${color};">${selectedText}</span>`;
          editor.editor.setSelectedRange(selectedRange);
          editor.editor.deleteInDirection("forward");
          editor.editor.insertHTML(html);
        }
        this.value = '';
      }
    });
  }

  // 文字揃え - 左
  if (alignLeftBtn) {
    alignLeftBtn.addEventListener('click', function(e) {
      e.preventDefault();
      if (editor.editor) {
        const editorElement = editor.querySelector('[contenteditable]');
        const selection = window.getSelection();
        if (selection.rangeCount > 0) {
          let node = selection.anchorNode;
          while (node && node !== editorElement) {
            if (node.nodeType === Node.ELEMENT_NODE && (node.tagName === 'DIV' || node.tagName === 'P')) {
              node.style.textAlign = 'left';
              break;
            }
            node = node.parentNode;
          }
        }
      }
    });
  }

  // 文字揃え - 中央
  if (alignCenterBtn) {
    alignCenterBtn.addEventListener('click', function(e) {
      e.preventDefault();
      if (editor.editor) {
        const editorElement = editor.querySelector('[contenteditable]');
        const selection = window.getSelection();
        if (selection.rangeCount > 0) {
          let node = selection.anchorNode;
          while (node && node !== editorElement) {
            if (node.nodeType === Node.ELEMENT_NODE && (node.tagName === 'DIV' || node.tagName === 'P')) {
              node.style.textAlign = 'center';
              break;
            }
            node = node.parentNode;
          }
        }
      }
    });
  }

  // 文字揃え - 右
  if (alignRightBtn) {
    alignRightBtn.addEventListener('click', function(e) {
      e.preventDefault();
      if (editor.editor) {
        const editorElement = editor.querySelector('[contenteditable]');
        const selection = window.getSelection();
        if (selection.rangeCount > 0) {
          let node = selection.anchorNode;
          while (node && node !== editorElement) {
            if (node.nodeType === Node.ELEMENT_NODE && (node.tagName === 'DIV' || node.tagName === 'P')) {
              node.style.textAlign = 'right';
              break;
            }
            node = node.parentNode;
          }
        }
      }
    });
  }
}

document.addEventListener('DOMContentLoaded', function() {
  setTimeout(setupFontControls, 200);
});

document.addEventListener('turbo:load', function() {
  setTimeout(setupFontControls, 200);
});

// 画像添付機能を無効化
function disableImageAttachment() {
  console.log('Disabling image attachment');

  document.querySelectorAll('trix-toolbar').forEach(toolbar => {
    const attachButton = toolbar.querySelector('[data-trix-action="attachFiles"]');
    if (attachButton) {
      attachButton.style.display = 'none';
    }
  });

  document.addEventListener('trix-file-accept', function(event) {
    event.preventDefault();
    alert('画像の添付は無効化されています。');
  });

  setTimeout(() => {
    document.querySelectorAll('[data-trix-action="attachFiles"]').forEach(btn => {
      btn.remove();
    });
  }, 100);
}

document.addEventListener('DOMContentLoaded', disableImageAttachment);
document.addEventListener('turbo:load', disableImageAttachment);
</script>
