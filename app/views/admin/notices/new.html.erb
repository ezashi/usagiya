<% content_for :page_title, "お知らせを作成" %>

<style>
    /* Trixカスタマイズスタイル */
    trix-toolbar .trix-button-group {
        margin-right: 8px;
    }

    trix-toolbar .trix-button {
        font-size: 0.85rem !important;
        padding: 0.4rem 0.6rem !important;
        font-weight: 500 !important;
        white-space: nowrap !important;
    }

    trix-toolbar .trix-button:hover {
        background-color: rgba(59, 130, 246, 0.1) !important;
    }

    trix-toolbar .trix-button.trix-active {
        background-color: rgba(59, 130, 246, 0.2) !important;
        color: #3b82f6 !important;
    }

    /* 画像添付ボタンを非表示 */
    [data-trix-action="attachFiles"] {
        display: none !important;
    }

    /* テキスト装飾のスタイル */
    trix-editor strong {
        font-weight: bold;
    }

    trix-editor em {
        font-style: italic;
    }

    trix-editor u {
        text-decoration: underline;
    }

    /* フォントサイズ */
    trix-editor [data-font-size="10"] {
        font-size: 10px !important;
    }

    trix-editor [data-font-size="12"] {
        font-size: 12px !important;
    }

    trix-editor [data-font-size="14"] {
        font-size: 14px !important;
    }

    trix-editor [data-font-size="16"] {
        font-size: 16px !important;
    }

    trix-editor [data-font-size="18"] {
        font-size: 18px !important;
    }

    trix-editor [data-font-size="20"] {
        font-size: 20px !important;
    }

    trix-editor [data-font-size="24"] {
        font-size: 24px !important;
    }

    trix-editor [data-font-size="28"] {
        font-size: 28px !important;
    }

    trix-editor [data-font-size="32"] {
        font-size: 32px !important;
    }

    trix-editor [data-font-size="36"] {
        font-size: 36px !important;
    }

    trix-editor [data-font-size="48"] {
        font-size: 48px !important;
    }

    /* フォントカラー */
    trix-editor [data-color="black"] {
        color: #000000 !important;
    }

    trix-editor [data-color="red"] {
        color: #FF0000 !important;
    }

    trix-editor [data-color="blue"] {
        color: #0000FF !important;
    }

    trix-editor [data-color="green"] {
        color: #008000 !important;
    }

    trix-editor [data-color="yellow"] {
        color: #FFFF00 !important;
    }

    trix-editor [data-color="orange"] {
        color: #FFA500 !important;
    }

    trix-editor [data-color="purple"] {
        color: #800080 !important;
    }

    trix-editor [data-color="gray"] {
        color: #808080 !important;
    }

    trix-editor [data-color="white"] {
        color: #FFFFFF !important;
    }

    /* 文字揃え */
    trix-editor .text-align-left {
        text-align: left !important;
    }

    trix-editor .text-align-center {
        text-align: center !important;
    }

    trix-editor .text-align-right {
        text-align: right !important;
    }

    /* フォントサイズとカラーのセレクトボックス */
    trix-toolbar select {
        font-size: 0.85rem;
        padding: 0.3rem 0.5rem;
        border: 1px solid #ccc;
        border-radius: 4px;
        background-color: white;
        cursor: pointer;
        margin: 0 4px;
    }

    trix-toolbar select:hover {
        background-color: rgba(59, 130, 246, 0.1);
    }

    /* ツールバーのカスタムコントロール */
    .trix-custom-controls {
        display: inline-flex;
        align-items: center;
        gap: 8px;
        margin-left: 8px;
    }

    .trix-custom-controls label {
        font-size: 0.85rem;
        margin: 0;
        display: inline-flex;
        align-items: center;
        gap: 4px;
    }

    /* 上下の余白を完全に削除 */
    trix-editor>div:first-child,
    trix-editor>h1:first-child,
    trix-editor>h2:first-child,
    trix-editor>h3:first-child,
    trix-editor>p:first-child,
    trix-editor>ul:first-child,
    trix-editor>ol:first-child,
    trix-editor>blockquote:first-child {
        margin-top: 0 !important;
        padding-top: 0 !important;
    }

    trix-editor>div:last-child,
    trix-editor>h1:last-child,
    trix-editor>h2:last-child,
    trix-editor>h3:last-child,
    trix-editor>p:last-child,
    trix-editor>ul:last-child,
    trix-editor>ol:last-child,
    trix-editor>blockquote:last-child {
        margin-bottom: 0 !important;
        padding-bottom: 0 !important;
    }

    /* Trixエディタ自体のパディングを調整 */
    trix-editor {
        padding-top: 0.5rem !important;
        padding-bottom: 0.5rem !important;
    }

    /* 最初と最後の要素の内部余白も削除 */
    trix-editor *:first-child {
        margin-top: 0 !important;
    }

    trix-editor *:last-child {
        margin-bottom: 0 !important;
    }
</style>

<div class="admin-notice-form">
    <div class="form-header">
        <%= link_to admin_notices_path, class: "back-link" do %>
        <svg class="back-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24" width="20" height="20">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19l-7-7m0 0l7-7m-7 7h18"></path>
        </svg>
        お知らせ一覧に戻る
        <% end %>
        <h1 class="form-title">お知らせを作成</h1>
    </div>

    <%= form_with model: [:admin, @notice], local: true, html: { novalidate: true, class: "notice-form" } do |f| %>
    <% if @notice.errors.any? %>
    <div class="admin-alert admin-alert-error">
        <strong><%= pluralize(@notice.errors.count, "件") %>のエラーがあります:</strong>
        <ul style="margin: 0.5rem 0 0 0; padding-left: 1.5rem;">
            <% @notice.errors.full_messages.each do |message| %>
            <li><%= message %></li>
            <% end %>
        </ul>
    </div>
    <% end %>

    <div class="form-layout">
        <!-- メインコンテンツ -->
        <div class="form-main">
            <!-- タイトル -->
            <div class="admin-card">
                <div class="admin-card-header">
                    <h2 class="admin-card-title">
                        <svg style="width: 1.5rem; height: 1.5rem; display: inline-block; vertical-align: middle;" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 8h10M7 12h4m1 8l-4-4H5a2 2 0 01-2-2V6a2 2 0 012-2h14a2 2 0 012 2v8a2 2 0 01-2 2h-3l-4 4z"></path>
                        </svg>
                        タイトル <span class="required-badge">必須</span>
                    </h2>
                </div>
                <div class="admin-card-body">
                    <%= f.text_field :title, 
                             class: "admin-form-control title-input", 
                             placeholder: "例: 年末年始の営業についてのお知らせ",
                             required: true %>
                </div>
            </div>

            <!-- 本文 -->
            <div class="admin-card">
                <div class="admin-card-header">
                    <h2 class="admin-card-title">
                        <svg style="width: 1.5rem; height: 1.5rem; display: inline-block; vertical-align: middle;" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h7"></path>
                        </svg>
                        本文 <span class="required-badge">必須</span>
                    </h2>
                </div>
                <div class="admin-card-body">
                    <%= f.rich_text_area :content, 
                                 class: "admin-rich-text",
                                 placeholder: "お知らせの内容を入力してください..." %>
                </div>
            </div>
        </div>

        <!-- サイドバー -->
        <div class="form-sidebar">
            <!-- アクションボタン -->
            <div class="action-buttons">
                <button type="button" class="admin-btn admin-btn-secondary" id="preview-btn">
                    <svg style="width: 1.25rem; height: 1.25rem;" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path>
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"></path>
                    </svg>
                    プレビュー
                </button>

                <%= f.submit "下書き保存",
                       class: "admin-btn admin-btn-secondary" %>

                <%= f.submit "公開",
                       class: "admin-btn admin-btn-success",
                       data: { turbo_confirm: "お知らせを公開しますか？\n一般ユーザーに表示されるようになります。" } %>
            </div>
        </div>
    </div>
    <% end %>
</div>

<!-- プレビューモーダル -->
<div id="preview-modal" class="admin-modal-overlay" style="display: none;">
    <div class="admin-modal" style="max-width: 800px;">
        <div class="admin-modal-header">
            <h2 class="admin-modal-title">プレビュー</h2>
            <button class="close-modal-btn" id="close-preview-btn">
                <svg fill="none" stroke="currentColor" viewBox="0 0 24 24" width="24" height="24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                </svg>
            </button>
        </div>
        <div class="admin-modal-body">
            <div class="modal-preview-container" id="modal-preview-content">
                <!-- プレビュー内容がJavaScriptで挿入されます -->
            </div>
        </div>
    </div>
</div>


<script>
    // プレビューモーダル
    document.addEventListener('DOMContentLoaded', function() {
        const previewBtn = document.getElementById('preview-btn');
        if (previewBtn) {
            previewBtn.addEventListener('click', function(e) {
                e.preventDefault();

                const title = document.querySelector('input[name="notice[title]"]').value;
                const content = document.querySelector('trix-editor').innerHTML;

                const previewHTML = `
        <div class="preview-header">
          <h3 class="preview-title">${title || '（タイトル未入力）'}</h3>
          <p class="preview-date">${new Date().toLocaleDateString('ja-JP', { year: 'numeric', month: 'long', day: 'numeric' })}</p>
        </div>
        <div class="preview-content">
          ${content || '（本文未入力）'}
        </div>
      `;

                document.getElementById('modal-preview-content').innerHTML = previewHTML;
                document.getElementById('preview-modal').style.display = 'flex';
            });
        }

        const closePreviewBtn = document.getElementById('close-preview-btn');
        if (closePreviewBtn) {
            closePreviewBtn.addEventListener('click', function() {
                document.getElementById('preview-modal').style.display = 'none';
            });
        }

        const previewModal = document.getElementById('preview-modal');
        if (previewModal) {
            previewModal.addEventListener('click', function(e) {
                if (e.target === this) {
                    this.style.display = 'none';
                }
            });
        }
    });

    // Trixエディタのカスタマイズ
    console.log('Trix customization script loaded');

    document.addEventListener('trix-before-initialize', function() {
        console.log('trix-before-initialize event fired');

        if (typeof Trix === 'undefined') {
            console.error('Trix is not defined');
            return;
        }

        // 画像添付を完全に無効化
        Trix.config.attachments.preview.caption = false;

        // 下線属性を追加
        Trix.config.textAttributes.underline = {
            tagName: "u",
            inheritable: true
        };

        // フォントサイズ属性を追加
        const fontSizes = [10, 12, 14, 16, 18, 20, 24, 28, 32, 36, 48];
        fontSizes.forEach(size => {
            Trix.config.textAttributes[`fontSize${size}`] = {
                tagName: "span",
                styleProperty: "fontSize",
                inheritable: true,
                parser: function(element) {
                    return element.dataset.fontSize === String(size);
                },
                render: function(element) {
                    element.dataset.fontSize = size;
                    element.style.fontSize = size + "px";
                }
            };
        });

        // カラー属性を追加
        const colors = ['black', 'red', 'blue', 'green', 'yellow', 'orange', 'purple', 'gray', 'white'];
        colors.forEach(color => {
            Trix.config.textAttributes[`color${color.charAt(0).toUpperCase() + color.slice(1)}`] = {
                tagName: "span",
                styleProperty: "color",
                inheritable: true,
                parser: function(element) {
                    return element.dataset.color === color;
                },
                render: function(element) {
                    element.dataset.color = color;
                }
            };
        });

        // 文字揃え属性を追加
        Trix.config.blockAttributes.alignLeft = {
            tagName: "div",
            parse: false,
            nestable: false,
            terminal: false,
            breakOnReturn: false,
            group: false,
            htmlAttributes: ["class"],
            render: function(element) {
                element.classList.add("text-align-left");
            }
        };

        Trix.config.blockAttributes.alignCenter = {
            tagName: "div",
            parse: false,
            nestable: false,
            terminal: false,
            breakOnReturn: false,
            group: false,
            htmlAttributes: ["class"],
            render: function(element) {
                element.classList.add("text-align-center");
            }
        };

        Trix.config.blockAttributes.alignRight = {
            tagName: "div",
            parse: false,
            nestable: false,
            terminal: false,
            breakOnReturn: false,
            group: false,
            htmlAttributes: ["class"],
            render: function(element) {
                element.classList.add("text-align-right");
            }
        };

        // カスタムツールバー
        Trix.config.toolbar.getDefaultHTML = function() {
            return `
      <div class="trix-button-row">
        <span class="trix-button-group trix-button-group--text-tools">
          <button type="button" class="trix-button trix-button--icon trix-button--icon-bold" data-trix-attribute="bold" data-trix-key="b" title="太字" tabindex="-1">太字</button>
          <button type="button" class="trix-button trix-button--icon trix-button--icon-italic" data-trix-attribute="italic" data-trix-key="i" title="斜体" tabindex="-1">斜体</button>
          <button type="button" class="trix-button" data-trix-attribute="underline" title="下線" tabindex="-1">下線</button>
        </span>
        <span class="trix-button-group trix-button-group--block-tools">
          <button type="button" class="trix-button" data-trix-attribute="alignLeft" title="左揃え" tabindex="-1">← 左</button>
          <button type="button" class="trix-button" data-trix-attribute="alignCenter" title="中央揃え" tabindex="-1">↔ 中央</button>
          <button type="button" class="trix-button" data-trix-attribute="alignRight" title="右揃え" tabindex="-1">右 →</button>
        </span>
        <span class="trix-custom-controls">
          <label>
            サイズ:
            <select id="font-size-select">
              <option value="">選択</option>
              <option value="10">10px</option>
              <option value="12">12px</option>
              <option value="14">14px</option>
              <option value="16">16px</option>
              <option value="18">18px</option>
              <option value="20">20px</option>
              <option value="24">24px</option>
              <option value="28">28px</option>
              <option value="32">32px</option>
              <option value="36">36px</option>
              <option value="48">48px</option>
            </select>
          </label>
          <label>
            色:
            <select id="font-color-select">
              <option value="">選択</option>
              <option value="black">黒</option>
              <option value="red">赤</option>
              <option value="blue">青</option>
              <option value="green">緑</option>
              <option value="yellow">黄</option>
              <option value="orange">オレンジ</option>
              <option value="purple">紫</option>
              <option value="gray">灰</option>
              <option value="white">白</option>
            </select>
          </label>
        </span>
        <span class="trix-button-group-spacer"></span>
        <span class="trix-button-group trix-button-group--history-tools">
          <button type="button" class="trix-button trix-button--icon trix-button--icon-undo" data-trix-action="undo" data-trix-key="z" title="元に戻す" tabindex="-1">戻す</button>
          <button type="button" class="trix-button trix-button--icon trix-button--icon-redo" data-trix-action="redo" data-trix-key="shift+z" title="やり直し" tabindex="-1">進む</button>
        </span>
      </div>
    `;
        };

        console.log('Trix toolbar customized successfully');
    });

    // フォントサイズとカラーの変更処理
    document.addEventListener('DOMContentLoaded', function() {
        setTimeout(function() {
            const fontSizeSelect = document.getElementById('font-size-select');
            const fontColorSelect = document.getElementById('font-color-select');
            const editor = document.querySelector('trix-editor');

            if (fontSizeSelect && editor) {
                fontSizeSelect.addEventListener('change', function() {
                    const size = this.value;
                    if (size) {
                        editor.editor.activateAttribute(`fontSize${size}`);
                        this.value = '';
                    }
                });
            }

            if (fontColorSelect && editor) {
                fontColorSelect.addEventListener('change', function() {
                    const color = this.value;
                    if (color) {
                        const attrName = `color${color.charAt(0).toUpperCase() + color.slice(1)}`;
                        editor.editor.activateAttribute(attrName);
                        this.value = '';
                    }
                });
            }
        }, 100);
    });

    document.addEventListener('turbo:load', function() {
        setTimeout(function() {
            const fontSizeSelect = document.getElementById('font-size-select');
            const fontColorSelect = document.getElementById('font-color-select');
            const editor = document.querySelector('trix-editor');

            if (fontSizeSelect && editor) {
                fontSizeSelect.addEventListener('change', function() {
                    const size = this.value;
                    if (size) {
                        editor.editor.activateAttribute(`fontSize${size}`);
                        this.value = '';
                    }
                });
            }

            if (fontColorSelect && editor) {
                fontColorSelect.addEventListener('change', function() {
                    const color = this.value;
                    if (color) {
                        const attrName = `color${color.charAt(0).toUpperCase() + color.slice(1)}`;
                        editor.editor.activateAttribute(attrName);
                        this.value = '';
                    }
                });
            }
        }, 100);
    });

    // 画像添付機能を無効化
    function disableImageAttachment() {
        console.log('Disabling image attachment');

        document.querySelectorAll('trix-toolbar').forEach(toolbar => {
            const attachButton = toolbar.querySelector('[data-trix-action="attachFiles"]');
            if (attachButton) {
                attachButton.style.display = 'none';
            }
        });

        document.addEventListener('trix-file-accept', function(event) {
            event.preventDefault();
            alert('画像の添付は無効化されています。');
        });

        setTimeout(() => {
            document.querySelectorAll('[data-trix-action="attachFiles"]').forEach(btn => {
                btn.remove();
            });
        }, 100);
    }

    document.addEventListener('DOMContentLoaded', disableImageAttachment);
    document.addEventListener('turbo:load', disableImageAttachment);

    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', disableImageAttachment);
    } else {
        disableImageAttachment();
    }
</script>