<% content_for(:page_title, 'おすすめ商品管理') %>

<style>
    .featured-container {
        max-width: 1400px;
        margin: 0 auto;
    }

    .page-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 2rem;
    }

    .page-title {
        font-size: 1.5rem;
        font-weight: bold;
        color: #111827;
    }

    .action-buttons {
        display: flex;
        gap: 0.75rem;
    }

    .btn {
        padding: 0.5rem 1rem;
        border-radius: 0.375rem;
        font-weight: 500;
        cursor: pointer;
        transition: all 0.2s;
        border: none;
        text-decoration: none;
        display: inline-block;
    }

    .btn-primary {
        background-color: #3b82f6;
        color: white;
    }

    .btn-primary:hover {
        background-color: #2563eb;
    }

    .btn-success {
        background-color: #10b981;
        color: white;
    }

    .btn-success:hover {
        background-color: #059669;
    }

    .btn-secondary {
        background-color: #6b7280;
        color: white;
    }

    .btn-secondary:hover {
        background-color: #4b5563;
    }

    /* ========== 商品グリッド ========== */
    .products-grid {
        display: grid;
        grid-template-columns: repeat(5, 1fr);
        gap: 1rem;
        margin-bottom: 2rem;
    }

    @media (max-width: 1280px) {
        .products-grid {
            grid-template-columns: repeat(4, 1fr);
        }
    }

    @media (max-width: 1024px) {
        .products-grid {
            grid-template-columns: repeat(3, 1fr);
        }
    }

    @media (max-width: 768px) {
        .products-grid {
            grid-template-columns: repeat(2, 1fr);
        }
    }

    /* 商品カード */
    .product-card {
        position: relative;
        background-color: white;
        border-radius: 0.5rem;
        box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
        overflow: hidden;
        cursor: move;
        transition: all 0.2s;
    }

    .product-card:hover {
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    }

    .product-card.dragging {
        opacity: 0.5;
    }

    .remove-btn {
        position: absolute;
        top: 0.5rem;
        left: 0.5rem;
        width: 2rem;
        height: 2rem;
        background-color: rgba(239, 68, 68, 0.9);
        color: white;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        cursor: pointer;
        border: none;
        font-size: 1.25rem;
        line-height: 1;
        transition: background-color 0.2s;
        z-index: 10;
    }

    .remove-btn:hover {
        background-color: rgba(220, 38, 38, 1);
    }

    .product-image-wrapper {
        width: 100%;
        padding-top: 100%;
        position: relative;
        background-color: #f3f4f6;
    }

    .product-image {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        object-fit: cover;
    }

    .product-info {
        padding: 0.75rem;
    }

    .product-name {
        font-weight: 600;
        color: #111827;
        margin-bottom: 0.25rem;
        font-size: 0.875rem;
        overflow: hidden;
        text-overflow: ellipsis;
        white-space: nowrap;
    }

    .product-price {
        color: #6b7280;
        font-size: 0.875rem;
    }

    /* 追加ボタン */
    .add-button-card {
        display: flex;
        align-items: center;
        justify-content: center;
        background-color: #f9fafb;
        border: 2px dashed #d1d5db;
        border-radius: 0.5rem;
        min-height: 200px;
        cursor: pointer;
        transition: all 0.2s;
    }

    .add-button-card:hover {
        background-color: #f3f4f6;
        border-color: #9ca3af;
    }

    .add-icon {
        width: 3rem;
        height: 3rem;
        color: #9ca3af;
    }

    /* モーダル */
    .modal-overlay {
        position: fixed;
        inset: 0;
        background-color: rgba(0, 0, 0, 0.5);
        display: none;
        align-items: center;
        justify-content: center;
        z-index: 50;
    }

    .modal-overlay.show {
        display: flex;
    }

    .modal-content {
        background-color: white;
        border-radius: 0.5rem;
        max-width: 60rem;
        width: 90%;
        max-height: 80vh;
        overflow-y: auto;
        padding: 1.5rem;
    }

    .modal-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 1.5rem;
    }

    .modal-title {
        font-size: 1.25rem;
        font-weight: bold;
        color: #111827;
    }

    .modal-close {
        color: #6b7280;
        cursor: pointer;
        background: none;
        border: none;
        padding: 0;
    }

    .modal-close:hover {
        color: #111827;
    }

    .search-box {
        margin-bottom: 1.5rem;
    }

    .search-input {
        width: 100%;
        padding: 0.5rem 1rem;
        border: 1px solid #d1d5db;
        border-radius: 0.375rem;
    }

    .search-input:focus {
        outline: none;
        border-color: #3b82f6;
        box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
    }

    .available-products-grid {
        display: grid;
        grid-template-columns: repeat(4, 1fr);
        gap: 1rem;
    }

    @media (max-width: 1024px) {
        .available-products-grid {
            grid-template-columns: repeat(3, 1fr);
        }
    }

    @media (max-width: 768px) {
        .available-products-grid {
            grid-template-columns: repeat(2, 1fr);
        }
    }

    .available-product-card {
        position: relative;
        background-color: white;
        border: 1px solid #e5e7eb;
        border-radius: 0.5rem;
        overflow: hidden;
        transition: all 0.2s;
    }

    .available-product-card:hover {
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }

    .add-product-btn {
        position: absolute;
        top: 0.5rem;
        left: 0.5rem;
        width: 2rem;
        height: 2rem;
        background-color: rgba(16, 185, 129, 0.9);
        color: white;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        cursor: pointer;
        border: none;
        font-size: 1.25rem;
        line-height: 1;
        transition: background-color 0.2s;
        z-index: 10;
    }

    .add-product-btn:hover {
        background-color: rgba(5, 150, 105, 1);
    }

    /* 空の状態 */
    .empty-state {
        text-align: center;
        padding: 3rem 1rem;
        color: #6b7280;
    }

    .empty-icon {
        width: 4rem;
        height: 4rem;
        margin: 0 auto 1rem;
        color: #d1d5db;
    }

    .empty-text {
        font-size: 1.125rem;
        margin-bottom: 0.5rem;
    }

    .empty-hint {
        font-size: 0.875rem;
        color: #9ca3af;
    }
</style>

<div class="featured-container">
    <div class="page-header">
        <h1 class="page-title">おすすめ商品管理</h1>
        <div class="action-buttons">
            <button class="btn btn-secondary" onclick="previewFeatured()">プレビュー</button>
            <button class="btn btn-primary" onclick="saveFeatured()">保存</button>
            <button class="btn btn-success" onclick="publishFeatured()">公開</button>
        </div>
    </div>

    <div id="featured-products" class="products-grid">
        <% if @featured_products.any? %>
        <% @featured_products.each do |product| %>
        <div class="product-card" data-id="<%= product.id %>" draggable="true">
            <%= button_to "×", remove_from_featured_admin_product_path(product), 
                        method: :delete, 
                        class: "remove-btn",
                        data: { confirm: "「#{product.name}」をおすすめ商品から削除しますか？" } %>

            <div class="product-image-wrapper">
                <% if product.image_url %>
                <img src="<%= product.image_url %>" alt="<%= product.name %>" class="product-image">
                <% else %>
                <div class="product-image" style="background-color: #e5e7eb;"></div>
                <% end %>
            </div>

            <div class="product-info">
                <div class="product-name" title="<%= product.name %>"><%= product.name %></div>
                <div class="product-price">¥<%= number_with_delimiter(product.price) %></div>
            </div>
        </div>
        <% end %>
        <% end %>

        <div class="add-button-card" onclick="openAddModal()">
            <svg class="add-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4"></path>
            </svg>
        </div>
    </div>

    <% if @featured_products.empty? %>
    <div class="empty-state">
        <svg class="empty-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20 7l-8-4-8 4m16 0l-8 4m8-4v10l-8 4m0-10L4 7m8 4v10M4 7v10l8 4"></path>
        </svg>
        <p class="empty-text">おすすめ商品が登録されていません</p>
        <p class="empty-hint">右側の「＋」ボタンから商品を追加してください</p>
    </div>
    <% end %>
</div>

<!-- 商品追加モーダル -->
<div id="add-modal" class="modal-overlay">
    <div class="modal-content">
        <div class="modal-header">
            <h2 class="modal-title">おすすめ商品に追加</h2>
            <button class="modal-close" onclick="closeAddModal()">
                <svg width="24" height="24" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                </svg>
            </button>
        </div>

        <div class="search-box">
            <input type="text" id="product-search" class="search-input" placeholder="商品名で検索..." onkeyup="filterProducts()">
        </div>

        <div id="available-products" class="available-products-grid">
            <% @available_products.each do |product| %>
            <div class="available-product-card" data-name="<%= product.name.downcase %>">
                <%= button_to "+", add_to_featured_admin_product_path(product), 
                        method: :post, 
                        class: "add-product-btn" %>

                <div class="product-image-wrapper">
                    <% if product.image_url %>
                    <img src="<%= product.image_url %>" alt="<%= product.name %>" class="product-image">
                    <% else %>
                    <div class="product-image" style="background-color: #e5e7eb;"></div>
                    <% end %>
                </div>

                <div class="product-info">
                    <div class="product-name" title="<%= product.name %>"><%= product.name %></div>
                    <div class="product-price">¥<%= number_with_delimiter(product.price) %></div>
                </div>
            </div>
            <% end %>
        </div>
    </div>
</div>

<script>
    // モーダル管理
    function openAddModal() {
        document.getElementById('add-modal').classList.add('show');
    }

    function closeAddModal() {
        document.getElementById('add-modal').classList.remove('show');
        document.getElementById('product-search').value = '';
        filterProducts();
    }

    // モーダルの外側をクリックしたら閉じる
    document.getElementById('add-modal').addEventListener('click', function(e) {
        if (e.target === this) {
            closeAddModal();
        }
    });

    // 商品検索
    function filterProducts() {
        const searchTerm = document.getElementById('product-search').value.toLowerCase();
        const cards = document.querySelectorAll('.available-product-card');

        cards.forEach(card => {
            const name = card.dataset.name;
            if (name.includes(searchTerm)) {
                card.style.display = 'block';
            } else {
                card.style.display = 'none';
            }
        });
    }

    // ドラッグ&ドロップ
    let draggedElement = null;

    const productCards = document.querySelectorAll('.product-card[draggable="true"]');

    productCards.forEach(card => {
        card.addEventListener('dragstart', handleDragStart);
        card.addEventListener('dragover', handleDragOver);
        card.addEventListener('drop', handleDrop);
        card.addEventListener('dragend', handleDragEnd);
    });

    function handleDragStart(e) {
        draggedElement = this;
        this.classList.add('dragging');
        e.dataTransfer.effectAllowed = 'move';
    }

    function handleDragOver(e) {
        if (e.preventDefault) {
            e.preventDefault();
        }
        e.dataTransfer.dropEffect = 'move';

        const target = e.target.closest('.product-card[draggable="true"]');
        if (target && target !== draggedElement) {
            const container = document.getElementById('featured-products');
            const allCards = [...container.querySelectorAll('.product-card[draggable="true"]')];
            const draggedIndex = allCards.indexOf(draggedElement);
            const targetIndex = allCards.indexOf(target);

            if (draggedIndex < targetIndex) {
                target.parentNode.insertBefore(draggedElement, target.nextSibling);
            } else {
                target.parentNode.insertBefore(draggedElement, target);
            }
        }

        return false;
    }

    function handleDrop(e) {
        if (e.stopPropagation) {
            e.stopPropagation();
        }
        return false;
    }

    function handleDragEnd(e) {
        this.classList.remove('dragging');
    }

    // アクションボタン
    function previewFeatured() {
        window.open('/products/featured', '_blank');
    }

    function saveFeatured() {
        saveOrder().then(() => {
            alert('並び順を保存しました');
        });
    }

    function publishFeatured() {
        if (confirm('おすすめ商品を公開しますか？\n保存されていない変更も同時に保存されます。')) {
            saveOrder().then(() => {
                alert('おすすめ商品を公開しました');
            });
        }
    }

    function saveOrder() {
        const container = document.getElementById('featured-products');
        const cards = container.querySelectorAll('.product-card[draggable="true"]');
        const order = Array.from(cards).map(card => card.dataset.id);

        return fetch('<%= update_featured_order_admin_products_path %>', {
            method: 'PATCH',
            headers: {
                'Content-Type': 'application/json',
                'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').content
            },
            body: JSON.stringify({
                order: order
            })
        });
    }
</script>